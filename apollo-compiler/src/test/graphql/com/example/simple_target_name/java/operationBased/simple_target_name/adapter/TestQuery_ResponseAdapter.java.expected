//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_target_name.adapter;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.Adapters;
import com.apollographql.apollo3.api.Assertions;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.NullableAdapter;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.json.JsonReader;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.simple_target_name.TestQuery;
import java.io.IOException;
import java.lang.Override;
import java.lang.String;
import java.util.Arrays;
import java.util.List;

public class TestQuery_ResponseAdapter {
  public enum Data implements Adapter<TestQuery.Data> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("scalar", "object", "object2");

    @Override
    public TestQuery.Data fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      java.lang.Object _scalar = null;
      TestQuery.Object _object = null;
      TestQuery.Object2 _object2 = null;

      loop:
      while (true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _scalar = Adapters.NullableAnyAdapter.fromJson(reader, customScalarAdapters); break;
          case 1: _object = new NullableAdapter<>(new ObjectAdapter<TestQuery.Object>(Object.INSTANCE, false)).fromJson(reader, customScalarAdapters); break;
          case 2: _object2 = new ObjectAdapter<TestQuery.Object2>(Object2.INSTANCE, false).fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      Assertions.checkFieldNotMissing(_object2, "object2");

      return new TestQuery.Data(
        _scalar,
        _object,
        _object2
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Data value) throws IOException {
      writer.name("scalar");
      Adapters.NullableAnyAdapter.toJson(writer, customScalarAdapters, value.scalar);

      writer.name("object");
      new NullableAdapter<>(new ObjectAdapter<TestQuery.Object>(Object.INSTANCE, false)).toJson(writer, customScalarAdapters, value.object);

      writer.name("object2");
      new ObjectAdapter<TestQuery.Object2>(Object2.INSTANCE, false).toJson(writer, customScalarAdapters, value.object2);
    }
  }

  public enum Object implements Adapter<TestQuery.Object> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("a");

    @Override
    public TestQuery.Object fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _a = null;

      loop:
      while (true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _a = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Object(
        _a
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Object value) throws IOException {
      writer.name("a");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.a);
    }
  }

  public enum Object2 implements Adapter<TestQuery.Object2> {
    INSTANCE;

    private static final List<String> RESPONSE_NAMES = Arrays.asList("a");

    @Override
    public TestQuery.Object2 fromJson(JsonReader reader, CustomScalarAdapters customScalarAdapters)
        throws IOException {
      String _a = null;

      loop:
      while (true) {
        switch (reader.selectName(RESPONSE_NAMES)) {
          case 0: _a = Adapters.NullableStringAdapter.fromJson(reader, customScalarAdapters); break;
          default: break loop;
        }
      }

      return new TestQuery.Object2(
        _a
      );
    }

    @Override
    public void toJson(JsonWriter writer, CustomScalarAdapters customScalarAdapters,
        TestQuery.Object2 value) throws IOException {
      writer.name("a");
      Adapters.NullableStringAdapter.toJson(writer, customScalarAdapters, value.a);
    }
  }
}
