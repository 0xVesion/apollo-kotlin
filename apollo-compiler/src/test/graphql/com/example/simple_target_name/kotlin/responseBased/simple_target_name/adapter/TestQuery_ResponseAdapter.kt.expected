//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.simple_target_name.adapter

import com.apollographql.apollo3.api.Adapter
import com.apollographql.apollo3.api.CustomScalarAdapters
import com.apollographql.apollo3.api.NullableAnyAdapter
import com.apollographql.apollo3.api.NullableStringAdapter
import com.apollographql.apollo3.api.json.JsonReader
import com.apollographql.apollo3.api.json.JsonWriter
import com.apollographql.apollo3.api.nullable
import com.apollographql.apollo3.api.obj
import com.example.simple_target_name.TestQuery
import kotlin.Any
import kotlin.String
import kotlin.Unit
import kotlin.collections.List

public object TestQuery_ResponseAdapter {
  public object Data : Adapter<TestQuery.Data> {
    public val RESPONSE_NAMES: List<String> = listOf("scalar", "object", "object2")

    public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
        TestQuery.Data {
      var _scalar: Any? = null
      var _object: TestQuery.Data.Object? = null
      var _object2: TestQuery.Data.Object2? = null

      while(true) {
        when (reader.selectName(RESPONSE_NAMES)) {
          0 -> _scalar = NullableAnyAdapter.fromJson(reader, customScalarAdapters)
          1 -> _object = Object.obj().nullable().fromJson(reader, customScalarAdapters)
          2 -> _object2 = Object2.obj().fromJson(reader, customScalarAdapters)
          else -> break
        }
      }

      return TestQuery.Data(
        scalar = _scalar,
        `object` = _object,
        object2 = _object2!!
      )
    }

    public override fun toJson(
      writer: JsonWriter,
      customScalarAdapters: CustomScalarAdapters,
      `value`: TestQuery.Data,
    ): Unit {
      writer.name("scalar")
      NullableAnyAdapter.toJson(writer, customScalarAdapters, value.scalar)

      writer.name("object")
      Object.obj().nullable().toJson(writer, customScalarAdapters, value.`object`)

      writer.name("object2")
      Object2.obj().toJson(writer, customScalarAdapters, value.object2)
    }

    private object Object : Adapter<TestQuery.Data.Object> {
      public val RESPONSE_NAMES: List<String> = listOf("a")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Object {
        var _a: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _a = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Object(
          a = _a
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Object,
      ): Unit {
        writer.name("a")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.a)
      }
    }

    private object Object2 : Adapter<TestQuery.Data.Object2> {
      public val RESPONSE_NAMES: List<String> = listOf("a")

      public override fun fromJson(reader: JsonReader, customScalarAdapters: CustomScalarAdapters):
          TestQuery.Data.Object2 {
        var _a: String? = null

        while(true) {
          when (reader.selectName(RESPONSE_NAMES)) {
            0 -> _a = NullableStringAdapter.fromJson(reader, customScalarAdapters)
            else -> break
          }
        }

        return TestQuery.Data.Object2(
          a = _a
        )
      }

      public override fun toJson(
        writer: JsonWriter,
        customScalarAdapters: CustomScalarAdapters,
        `value`: TestQuery.Data.Object2,
      ): Unit {
        writer.name("a")
        NullableStringAdapter.toJson(writer, customScalarAdapters, value.a)
      }
    }
  }
}
