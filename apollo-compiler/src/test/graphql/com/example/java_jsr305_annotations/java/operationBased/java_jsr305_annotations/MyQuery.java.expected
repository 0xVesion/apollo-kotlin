//
// AUTO-GENERATED FILE. DO NOT MODIFY.
//
// This class was automatically generated by Apollo GraphQL version '$VERSION'.
//
package com.example.java_jsr305_annotations;

import com.apollographql.apollo3.api.Adapter;
import com.apollographql.apollo3.api.CompiledField;
import com.apollographql.apollo3.api.CustomScalarAdapters;
import com.apollographql.apollo3.api.ObjectAdapter;
import com.apollographql.apollo3.api.Optional;
import com.apollographql.apollo3.api.Query;
import com.apollographql.apollo3.api.json.JsonWriter;
import com.example.java_jsr305_annotations.adapter.MyQuery_ResponseAdapter;
import com.example.java_jsr305_annotations.adapter.MyQuery_VariablesAdapter;
import com.example.java_jsr305_annotations.selections.MyQuerySelections;
import com.example.java_jsr305_annotations.type.MyInput;
import java.io.IOException;
import java.lang.Integer;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import javax.annotation.Nonnull;
import javax.annotation.Nullable;

public class MyQuery implements Query<MyQuery.Data> {
  public static final String OPERATION_ID = "75a121303b1c722fd9a9f0cfc451ae9cd36dc1860445c6f3b1191350ead43bd7";

  /**
   * The minimized GraphQL document being sent to the server to save a few bytes.
   * The un-minimized version is:
   *
   * query MyQuery($nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 , $nullableInput: MyInput, $nonNullableInput: MyInput!, $nonNullableInputWithDefault: MyInput! = {
   *   nonNullableInt: 4
   * }
   *  ) {
   *   nullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault)
   *   nonNullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault)
   *   nullableMyType {
   *     nullableInt
   *     nonNullableInt
   *   }
   *   nonNullableMyType {
   *     nullableInt
   *     nonNullableInt
   *   }
   * }
   */
  public static final String OPERATION_DOCUMENT = "query MyQuery($nullableInt: Int, $nonNullableInt: Int!, $nonNullableIntWithDefault: Int! = 4 , $nullableInput: MyInput, $nonNullableInput: MyInput!, $nonNullableInputWithDefault: MyInput! = { nonNullableInt: 4 } ) { nullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault) nonNullableInt(nullableInt: $nullableInt, nonNullableInt: $nonNullableInt, nonNullableIntWithDefault: $nonNullableIntWithDefault, nullableInput: $nullableInput, nonNullableInput: $nonNullableInput, nonNullableInputWithDefault: $nonNullableInputWithDefault) nullableMyType { nullableInt nonNullableInt } nonNullableMyType { nullableInt nonNullableInt } }";

  public static final String OPERATION_NAME = "MyQuery";

  @Nonnull
  public final Optional<Integer> nullableInt;

  public final int nonNullableInt;

  @Nonnull
  public final Optional<Integer> nonNullableIntWithDefault;

  @Nonnull
  public final Optional<MyInput> nullableInput;

  @Nonnull
  public final MyInput nonNullableInput;

  @Nonnull
  public final Optional<MyInput> nonNullableInputWithDefault;

  private transient volatile int $hashCode;

  private transient volatile boolean $hashCodeMemoized;

  private transient volatile String $toString;

  public MyQuery(@Nonnull Optional<Integer> nullableInt, int nonNullableInt,
      @Nonnull Optional<Integer> nonNullableIntWithDefault,
      @Nonnull Optional<MyInput> nullableInput, @Nonnull MyInput nonNullableInput,
      @Nonnull Optional<MyInput> nonNullableInputWithDefault) {
    this.nullableInt = nullableInt;
    this.nonNullableInt = nonNullableInt;
    this.nonNullableIntWithDefault = nonNullableIntWithDefault;
    this.nullableInput = nullableInput;
    this.nonNullableInput = nonNullableInput;
    this.nonNullableInputWithDefault = nonNullableInputWithDefault;
  }

  @Override
  public boolean equals(Object o) {
    if (o == this) {
      return true;
    }
    if (o instanceof MyQuery) {
      MyQuery that = (MyQuery) o;
      return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
       &&this.nonNullableInt == that.nonNullableInt
       &&((this.nonNullableIntWithDefault == null) ? (that.nonNullableIntWithDefault == null) : this.nonNullableIntWithDefault.equals(that.nonNullableIntWithDefault))
       &&((this.nullableInput == null) ? (that.nullableInput == null) : this.nullableInput.equals(that.nullableInput))
       &&((this.nonNullableInput == null) ? (that.nonNullableInput == null) : this.nonNullableInput.equals(that.nonNullableInput))
       &&((this.nonNullableInputWithDefault == null) ? (that.nonNullableInputWithDefault == null) : this.nonNullableInputWithDefault.equals(that.nonNullableInputWithDefault));
    }
    return false;
  }

  @Override
  public int hashCode() {
    if (!$hashCodeMemoized) {
      int h = 1;
      h *= 1000003;
      h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
      h *= 1000003;
      h ^= nonNullableInt;
      h *= 1000003;
      h ^= (nonNullableIntWithDefault == null) ? 0 : nonNullableIntWithDefault.hashCode();
      h *= 1000003;
      h ^= (nullableInput == null) ? 0 : nullableInput.hashCode();
      h *= 1000003;
      h ^= (nonNullableInput == null) ? 0 : nonNullableInput.hashCode();
      h *= 1000003;
      h ^= (nonNullableInputWithDefault == null) ? 0 : nonNullableInputWithDefault.hashCode();
      $hashCode = h;
      $hashCodeMemoized = true;
    }
    return $hashCode;
  }

  @Override
  public String toString() {
    if ($toString == null) {
      $toString = "MyQuery{"
        + "nullableInt=" + nullableInt + ", "
        + "nonNullableInt=" + nonNullableInt + ", "
        + "nonNullableIntWithDefault=" + nonNullableIntWithDefault + ", "
        + "nullableInput=" + nullableInput + ", "
        + "nonNullableInput=" + nonNullableInput + ", "
        + "nonNullableInputWithDefault=" + nonNullableInputWithDefault
        + "}";
    }
    return $toString;
  }

  public static Builder builder() {
    return new Builder();
  }

  @Override
  public String id() {
    return OPERATION_ID;
  }

  @Override
  public String document() {
    return OPERATION_DOCUMENT;
  }

  @Override
  public String name() {
    return OPERATION_NAME;
  }

  @Override
  public void serializeVariables(JsonWriter writer, CustomScalarAdapters customScalarAdapters)
      throws IOException {
    MyQuery_VariablesAdapter.INSTANCE.toJson(writer, customScalarAdapters, this);
  }

  @Override
  public Adapter<Data> adapter() {
    return new ObjectAdapter<Data>(MyQuery_ResponseAdapter.Data.INSTANCE, false);
  }

  @Override
  public CompiledField rootField() {
    return new CompiledField.Builder(
      "data",
      com.example.java_jsr305_annotations.type.Query.type
    )
    .selections(MyQuerySelections.__root)
    .build();
  }

  public static final class Builder {
    private Integer nullableInt;

    private int nonNullableInt;

    private Integer nonNullableIntWithDefault;

    private MyInput nullableInput;

    private MyInput nonNullableInput;

    private MyInput nonNullableInputWithDefault;

    Builder() {
    }

    public Builder nullableInt(@Nullable Integer nullableInt) {
      this.nullableInt = nullableInt;
      return this;
    }

    public Builder nonNullableInt(int nonNullableInt) {
      this.nonNullableInt = nonNullableInt;
      return this;
    }

    public Builder nonNullableIntWithDefault(@Nullable Integer nonNullableIntWithDefault) {
      this.nonNullableIntWithDefault = nonNullableIntWithDefault;
      return this;
    }

    public Builder nullableInput(@Nullable MyInput nullableInput) {
      this.nullableInput = nullableInput;
      return this;
    }

    public Builder nonNullableInput(@Nonnull MyInput nonNullableInput) {
      this.nonNullableInput = nonNullableInput;
      return this;
    }

    public Builder nonNullableInputWithDefault(@Nullable MyInput nonNullableInputWithDefault) {
      this.nonNullableInputWithDefault = nonNullableInputWithDefault;
      return this;
    }

    public MyQuery build() {
      return new MyQuery(Optional.presentIfNotNull(nullableInt),
          nonNullableInt,
          Optional.presentIfNotNull(nonNullableIntWithDefault),
          Optional.presentIfNotNull(nullableInput),
          nonNullableInput,
          Optional.presentIfNotNull(nonNullableInputWithDefault));
    }
  }

  public static class Data implements Query.Data {
    @Nullable
    public Integer nullableInt;

    public int nonNullableInt;

    @Nullable
    public NullableMyType nullableMyType;

    @Nonnull
    public NonNullableMyType nonNullableMyType;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public Data(@Nullable Integer nullableInt, int nonNullableInt,
        @Nullable NullableMyType nullableMyType, @Nonnull NonNullableMyType nonNullableMyType) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
      this.nullableMyType = nullableMyType;
      this.nonNullableMyType = nonNullableMyType;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof Data) {
        Data that = (Data) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt
         &&((this.nullableMyType == null) ? (that.nullableMyType == null) : this.nullableMyType.equals(that.nullableMyType))
         &&((this.nonNullableMyType == null) ? (that.nonNullableMyType == null) : this.nonNullableMyType.equals(that.nonNullableMyType));
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        h *= 1000003;
        h ^= nonNullableInt;
        h *= 1000003;
        h ^= (nullableMyType == null) ? 0 : nullableMyType.hashCode();
        h *= 1000003;
        h ^= (nonNullableMyType == null) ? 0 : nonNullableMyType.hashCode();
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "Data{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt + ", "
          + "nullableMyType=" + nullableMyType + ", "
          + "nonNullableMyType=" + nonNullableMyType
          + "}";
      }
      return $toString;
    }
  }

  public static class NullableMyType {
    @Nullable
    public Integer nullableInt;

    public int nonNullableInt;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public NullableMyType(@Nullable Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof NullableMyType) {
        NullableMyType that = (NullableMyType) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt;
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        h *= 1000003;
        h ^= nonNullableInt;
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "NullableMyType{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt
          + "}";
      }
      return $toString;
    }
  }

  public static class NonNullableMyType {
    @Nullable
    public Integer nullableInt;

    public int nonNullableInt;

    private transient volatile int $hashCode;

    private transient volatile boolean $hashCodeMemoized;

    private transient volatile String $toString;

    public NonNullableMyType(@Nullable Integer nullableInt, int nonNullableInt) {
      this.nullableInt = nullableInt;
      this.nonNullableInt = nonNullableInt;
    }

    @Override
    public boolean equals(Object o) {
      if (o == this) {
        return true;
      }
      if (o instanceof NonNullableMyType) {
        NonNullableMyType that = (NonNullableMyType) o;
        return ((this.nullableInt == null) ? (that.nullableInt == null) : this.nullableInt.equals(that.nullableInt))
         &&this.nonNullableInt == that.nonNullableInt;
      }
      return false;
    }

    @Override
    public int hashCode() {
      if (!$hashCodeMemoized) {
        int h = 1;
        h *= 1000003;
        h ^= (nullableInt == null) ? 0 : nullableInt.hashCode();
        h *= 1000003;
        h ^= nonNullableInt;
        $hashCode = h;
        $hashCodeMemoized = true;
      }
      return $hashCode;
    }

    @Override
    public String toString() {
      if ($toString == null) {
        $toString = "NonNullableMyType{"
          + "nullableInt=" + nullableInt + ", "
          + "nonNullableInt=" + nonNullableInt
          + "}";
      }
      return $toString;
    }
  }
}
